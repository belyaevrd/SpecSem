#include <stdbool.h>
#include <time.h>
#include <arpa/inet.h>

#ifdef DEBUGTEST
#define DEBUG(...) printf(__VA_ARGS__);
#else
#define DEBUG(...)
#endif

//! Структура для работы Управляющего узла
typedef struct
{
    //! Адрес для прослушивания запросов на подключение.
    struct sockaddr listen_addr;
    //! Максимальное время работы в секундах.
    time_t max_time;
    //! Количество рабочих узлов, необходимых для запуска вычисления.
    size_t num_nodes;
    //! Дескриптор слушающего сокета для первоначального подключения клиентов.
    int listen_sock_fd;
    //! Флаг, указывающий, была ли структура инициализирована функцией info_manager_init.
    bool is_init;
} INFO_MANAGER;

/*!
 * \brief Функция для инициализации структуры INFO_MANAGER.
 *
 * \param[out] manager Указатель на структуру INFO_MANAGER, которую необходимо инициализировать.
 * \param[in] addr Строка, содержащая адрес для Управляющего узла (например, "127.0.0.1").
 * \param[in] port Строка, содержащая номер порта для Управляющего узла (например, "8080").
 * \param[in] seconds Максимальное время общего ожидания для Управляющего узла (в секундах).
 * \param[in] num_nodes Количество рабочих узлов, необходимых для начала вычислений.
 *
 * \details Функция инициализирует структуру INFO_MANAGER, устанавливая адрес прослушивания,
 *          максимальное время ожидания и требуемое количество рабочих узлов.
 *          После успешной инициализации поле is_init устанавливается в true.
 */
int info_manager_init(INFO_MANAGER *manager, const char *addr, const char *port, time_t time, int num_nodes);
/*!
 * \brief Функция для старта работы Управляющего узла.
 *
 * \param[in] manager Структура INFO_MANAGER, инициализированная функцией info_manager_init.
 * \param[in] num_tasks Количество задач для распределенного вычисления.
 * \param[in] tasks Указатель на задачи для передачи по сети
 * \param[out] ans Указатель на область памяти, в которую последовательно записываются результаты выполнения задач.
 *
 * \return Возвращает 0 в случае успеха, -EINVAL при некорректных аргументах и -1 при возникновении ошибок.
 *
 * \details Функция ожидает подключения рабочих узлов в количестве, указанном в структуре INFO_MANAGER,
 *          получает информацию о количестве их ядер и распределяет задачи по принципу "одна задача - одно ядро".
 */
int start_manager(INFO_MANAGER *manager, size_t size_of_structure, size_t num_tasks, char *tasks, char *ans);
